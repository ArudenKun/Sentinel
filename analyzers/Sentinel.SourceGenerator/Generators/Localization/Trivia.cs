using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace Sentinel.SourceGenerator.Generators.Localization;

internal static class Trivia
{
    internal static SyntaxTrivia CreateClassHeader(string fileName) =>
        SyntaxFactory.Comment($"///<summary>Localizations from \"{fileName}\"</summary>");

    internal static SyntaxTrivia CreateNestedClassHeader(string fileName, string nestedPath) =>
        SyntaxFactory.Comment(
            $"///<summary>Localizations for \"{StringHelper.Keys.ReplaceSeparator(nestedPath, ".")}\" from \"{fileName}\"</summary>"
        );

    internal static SyntaxTrivia CreateMemberHeader(string value) =>
        SyntaxFactory.Comment(
            $"///<summary>Similar to: {StringHelper.EscapeValue(value)}</summary>"
        );

    internal static SyntaxTrivia[] CreateGetAllDocCommentTrivia() =>
        [
            SyntaxFactory.Comment("/// <summary>"),
            SyntaxFactory.Comment("/// Retrieves all translations for the specified culture."),
            SyntaxFactory.Comment("/// </summary>"),
            SyntaxFactory.Comment(
                "/// <param name=\"cultureInfo\">The culture for which translations are retrieved. Defaults to the current UI culture.</param>"
            ),
            SyntaxFactory.Comment(
                "/// <returns>A dictionary containing all translations for the specified culture.</returns>"
            ),
        ];

    internal static SyntaxTrivia[] CreateGetCulturesDocCommentTrivia() =>
        [
            SyntaxFactory.Comment("/// <summary>"),
            SyntaxFactory.Comment("/// Retrieves all available cultures"),
            SyntaxFactory.Comment("/// </summary>"),
            SyntaxFactory.Comment(
                "/// <returns>A list containing all available cultures</returns>"
            ),
        ];

    internal static SyntaxTrivia[] CreateGetStringDocCommentTrivia() =>
        [
            SyntaxFactory.Comment("/// <summary>"),
            SyntaxFactory.Comment(
                "/// Retrieves a localized string for the specified key and culture."
            ),
            SyntaxFactory.Comment("/// </summary>"),
            SyntaxFactory.Comment(
                "/// <param name=\"key\">The key of the string to retrieve.</param>"
            ),
            SyntaxFactory.Comment(
                "/// <param name=\"cultureInfo\">The culture for which the string is retrieved. Defaults to the current UI culture.</param>"
            ),
            SyntaxFactory.Comment(
                "/// <returns>The localized string if found, traversing through parent cultures. Otherwise, the key itself.</returns>"
            ),
        ];

    internal static SyntaxTrivia CreateFileHeader(string assemblyName) =>
        SyntaxFactory.Comment(
            $"""
            //------------------------------------------------------------------------------
            // <auto-generated>
            //     This code was generated by {assemblyName}.
            //
            //     Changes to this file may cause incorrect behavior and will be lost if
            //     the code is regenerated.
            // </auto-generated>
            //------------------------------------------------------------------------------
            """
        );
}
